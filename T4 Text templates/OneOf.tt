<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
/* <autogenerated on="<#= DateTime.Now.ToString("yyyy-MM-dd") #>">
 * This code is generated by a tool and will be overwritten when regenerated
 * </autogenerated>
*/
namespace System.Objects
{
<#
int indentation = 1;
int increase = 1;
char indentationCharacter = '\t';

void Increment() =>	indentation += increase;
void Decrement() => indentation -= increase;
string Indent() => new string(indentationCharacter, indentation);

string generateClassName(int length) => "OneOf<" + string.Join(", ", Enumerable.Range(1, length).Select(x => $"T{x}")) + ">";
string generateParameters(int length) => string.Join(", ", Enumerable.Range(1, length).Select(x => $"T{x} value{x} = default"));

for (int classIndex = 1; classIndex < 5; classIndex++)
{
	string className = generateClassName(classIndex + 1);

	WriteLine($"{Indent()}/// <summary>Wrapper for a combination of {classIndex + 1} classes.</summary>");
	Write($"{Indent()}public partial class {className}");
	WriteLine("");
	WriteLine($"{Indent()}{{");

	Increment();

	WriteLine($"{Indent()}// Fields");
	WriteLine($"{Indent()}private readonly int _index;");
	for (int typeIndex = 0; typeIndex <= classIndex; typeIndex++)
	{
		WriteLine($"{Indent()}private readonly T{typeIndex + 1} _value{typeIndex + 1};");
	}

	WriteLine("");
	WriteLine($"{Indent()}/// <summary>Creates a new OneOf object with {classIndex + 1} types.</summary>");
	Write($"{Indent()}private OneOf(int index, {generateParameters(classIndex+1)})");
	WriteLine("");
	WriteLine($"{Indent()}{{");
	Increment();
	WriteLine($"{Indent()}_index = index;");
	for (int typeIndex = 0; typeIndex <= classIndex; typeIndex++)
	{
		Write($"{Indent()}_value{typeIndex + 1} = value{typeIndex + 1};");
		WriteLine("");
	}	
	Decrement();
	WriteLine($"{Indent()}}}");

	WriteLine("");
	for (int typeIndex = 0; typeIndex <= classIndex; typeIndex++)
	{
		WriteLine($"{Indent()}/// <summary>Creates a new OneOf object from the specified type T{typeIndex + 1}.</summary>");
		Write($"{Indent()}public static implicit operator {className}(T{typeIndex + 1} value)");
		Write($" => new {className}({typeIndex}, value{typeIndex + 1}: value);");
		WriteLine("");
		WriteLine("");
	}

	WriteLine($"{Indent()}/// <summary>Matches the current OneOf object to a specific mapper.</summary>");
	Write($"{Indent()}public TResult Match<TResult>(");
	for (int typeIndex = 0; typeIndex <= classIndex; typeIndex++)
	{
		if(typeIndex > 0) { Write(", "); }
		Write($"Func<T{typeIndex + 1}, TResult> f{typeIndex+1}");
	}
	Write(")");
	WriteLine("");
	WriteLine($"{Indent()}{{");
	Increment();
	for (int typeIndex = 0; typeIndex <= classIndex; typeIndex++)
	{
		Write($"{Indent()}if (_index == {typeIndex} && f{typeIndex+1} != null) {{ return f{typeIndex+1}(_value{typeIndex+1}); }}");
		WriteLine("");
	}
	WriteLine($"{Indent()}throw new InvalidOperationException();");
	Decrement();
	WriteLine($"{Indent()}}}");

	Decrement();

	WriteLine($"{Indent()}}}");
	WriteLine("");
}
#>}